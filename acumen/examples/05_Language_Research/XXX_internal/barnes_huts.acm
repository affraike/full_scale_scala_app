// A planet is represented by:
// - a unique label (index) 
// - a mass
// - a position
// - a speed (the derivative of the position)
// - an acceleration (the derivative of the speed)
// - a gravitationnal force applied on it
model Planet (index, mass, position, position', position'', force) =
initially
always  
  position'' = force


// This class represents nodes in the octree
// An octree node is represented by:
// - a mode (used more like methods)
// - an index to know which area of the space the node represents
// - a centerSpace and a widthSpace which characterize 
//   the area of the space where plantes are
// - a massCenter and a positionMassCenter which approximate the set of 
//   planets present in this area
// - a massNewPlanet and a positionNewPlanet which are important elements 
//   to build the octree and to compute the gravitationnal force
// - a force which the result of the computation of the gravitationnal force
model OctreeNode (mode, index, centerSpace, widthSpace, massCenter, 
           positionMassCenter, massNewPlanet, positionNewPlanet, force) =
initially
  ux  =  (1, 0, 0) ,
  uy  =  (0, 1, 0) ,
  uz  =  (0, 0, 1) ,

  nbchildren  =  0 ,
  count  =  1 ,
  subspaceindex  =  0 ,
  newCenterSpace  =  (0, 0, 0) ,
  subspaceindex2  =  0 ,
  newCenterSpace2  =  (0, 0, 0) ,

  // the constant of the approximation in the computation 
  // of the gravitationnal force
  theta  =  0.7
always
  match mode with [
  // default mode
    "Ready" ->
  // set of operations to add a new planet in the octree.
  | "Insert" -> 
      if ux dot positionNewPlanet >= ux dot centerSpace then
        if uy dot positionNewPlanet >= uy dot centerSpace then
          if uz dot positionNewPlanet >= uz dot centerSpace then
            subspaceindex + = 1 ,
            newCenterSpace + = (ux dot centerSpace + widthSpace * 0.25, 
                                uy dot centerSpace + widthSpace * 0.25, 
                                uz dot centerSpace + widthSpace * 0.25)        
          else (
            subspaceindex + = 2 ,
            newCenterSpace + = (ux dot centerSpace + widthSpace * 0.25, 
                                uy dot centerSpace + widthSpace * 0.25, 
                                uz dot centerSpace - widthSpace * 0.25))
        elseif uz dot positionNewPlanet >= uz dot centerSpace then
          subspaceindex + = 3 ,
          newCenterSpace + = (ux dot centerSpace + widthSpace * 0.25, 
                              uy dot centerSpace - widthSpace * 0.25, 
                              uz dot centerSpace + widthSpace * 0.25)
        else (
          subspaceindex + = 4 ,
          newCenterSpace + = (ux dot centerSpace + widthSpace * 0.25, 
                              uy dot centerSpace - widthSpace * 0.25, 
                              uz dot centerSpace - widthSpace * 0.25))
      elseif uy dot positionNewPlanet >= uy dot centerSpace then
        if uz dot positionNewPlanet >=  uz dot centerSpace then
          subspaceindex + = 5 ,
          newCenterSpace + = (ux dot centerSpace - widthSpace * 0.25, 
                              uy dot centerSpace + widthSpace * 0.25, 
                              uz dot centerSpace + widthSpace * 0.25)
        else (
          subspaceindex + = 6 ,
          newCenterSpace + = (ux dot centerSpace - widthSpace * 0.25, 
                              uy dot centerSpace + widthSpace * 0.25, 
                              uz dot centerSpace - widthSpace * 0.25))
      elseif uz dot positionNewPlanet >= uz dot centerSpace then
        subspaceindex + = 7 ,
        newCenterSpace + = (ux dot centerSpace - widthSpace * 0.25, 
                            uy dot centerSpace - widthSpace * 0.25, 
                            uz dot centerSpace + widthSpace * 0.25)
      else (
        subspaceindex + = 8 ,
        newCenterSpace + = (ux dot centerSpace - widthSpace * 0.25, 
                            uy dot centerSpace - widthSpace * 0.25, 
                            uz dot centerSpace - widthSpace * 0.25)),
      nbchildren + = sum 1 for i in self.children if i.modelName == type (OctreeNode) ,
      if nbchildren == 0 then
        if ux dot positionMassCenter >= ux dot centerSpace then
          if uy dot positionMassCenter >= uy dot centerSpace then
            if uz dot positionMassCenter >= uz dot centerSpace then
              subspaceindex2 + = 1 ,
              newCenterSpace2 + = (ux dot centerSpace + widthSpace * 0.25, 
                                   uy dot centerSpace + widthSpace * 0.25, 
                                   uz dot centerSpace + widthSpace * 0.25)
            else (
              subspaceindex2 + = 2 ,
              newCenterSpace2 + = (ux dot centerSpace + widthSpace * 0.25, 
                                   uy dot centerSpace + widthSpace * 0.25, 
                                   uz dot centerSpace - widthSpace * 0.25))
          elseif uz dot positionMassCenter >= uz dot centerSpace then
            subspaceindex2 + = 3 ,
            newCenterSpace2 + = (ux dot centerSpace + widthSpace * 0.25, 
                                 uy dot centerSpace - widthSpace * 0.25,   
                                 uz dot centerSpace + widthSpace * 0.25)
          else (
            subspaceindex2 + = 4 ,
            newCenterSpace2 + = (ux dot centerSpace + widthSpace * 0.25, 
                                 uy dot centerSpace - widthSpace * 0.25, 
                                 uz dot centerSpace - widthSpace * 0.25))
        elseif uy dot positionMassCenter >= uy dot centerSpace then
          if uz dot positionMassCenter >= uz dot centerSpace then
            subspaceindex2 + = 5 ,
            newCenterSpace2 + = (ux dot centerSpace - widthSpace * 0.25, 
                                 uy dot centerSpace + widthSpace * 0.25, 
                                 uz dot centerSpace + widthSpace * 0.25)
          else (
            subspaceindex2 + = 6 ,
            newCenterSpace2 + = (ux dot centerSpace - widthSpace * 0.25, 
                                 uy dot centerSpace + widthSpace * 0.25, 
                                 uz dot centerSpace - widthSpace * 0.25))
        elseif uz dot positionMassCenter >= uz dot centerSpace then
          subspaceindex2 + = 7 ,
          newCenterSpace2 + = (ux dot centerSpace - widthSpace * 0.25, 
                               uy dot centerSpace - widthSpace * 0.25, 
                               uz dot centerSpace + widthSpace * 0.25)
        else (
          subspaceindex2 + = 8 ,
          newCenterSpace2 + = (ux dot centerSpace - widthSpace * 0.25, 
                               uy dot centerSpace - widthSpace * 0.25, 
                               uz dot centerSpace - widthSpace * 0.25)),
        create OctreeNode ("Ready", subspaceindex2, newCenterSpace2, widthSpace * 0.5, 
                           massCenter, positionMassCenter, 0, (0, 0, 0), (0, 0, 0)) ,
        if subspaceindex2 == subspaceindex then
          // %TODO This part has to be verified to check the correctness !
          foreach c in self.children do (
            if c.modelName == type (OctreeNode) && c.index == subspaceindex2 then
              c.massNewPlanet + = massNewPlanet ,
              c.positionNewPlanet + = positionNewPlanet ,
              c.mode + = "Insert"
            noelse)
        else (
          create OctreeNode ("Ready", subspaceindex, newCenterSpace, widthSpace * 0.5, 
                massNewPlanet, positionNewPlanet, 0, (0, 0, 0), (0, 0, 0))),
        mode + = "Ready"
      else (
        foreach c in self.children do (
          // %TODO This part has to be verified to check the correctness !
          if c.modelName == type (OctreeNode) && c.index == subspaceindex then
            c.massNewPlanet + = massNewPlanet ,
            c.positionNewPlanet + = positionNewPlanet ,
            c.mode + = "Insert"
          noelse ) ,
        mode + = "Ready" ),
     
      // compute the coordinates of the mass approximatoing the planets in the 
      // area represented by this node
      positionMassCenter + = sum i 
      for i in (positionNewPlanet * massNewPlanet / (massNewPlanet + massCenter),
              massCenter * positionMassCenter / (massNewPlanet + massCenter)) 
      if true ,    
        massCenter + = sum i 
      for i in (massCenter, massNewPlanet) if true ,
        mode + = "ComputeForce"
    // set of operations to compute the gravitationnal force 
  | "ComputeForce" ->  
      if norm (positionNewPlanet - positionMassCenter) == 0 then
        force + = (0, 0, 0)
      else (
        nbchildren + = sum 1  for i in self.children if i.modelName == type (OctreeNode) ,
        if nbchildren == 0 then
          force + = massCenter * (positionMassCenter - positionNewPlanet) / 
                    (norm(positionMassCenter - positionNewPlanet) ^ 3)
        elseif (norm (positionNewPlanet - positionMassCenter) / widthSpace) <= theta then
          force+ = massCenter * (positionMassCenter - positionNewPlanet) / 
                   (norm(positionMassCenter - positionNewPlanet) ^ 3)
        else (
          force + = (0, 0, 0) ,
          count + = 1 ,
          mode + = "ComputeForceWorking" ))
  
  | "ComputeForceWorking" ->  
      if count <= 8 then
        foreach c in self.children do (
          if c.index == count then
            c.positionNewPlanet + = positionNewPlanet ,
            c.massNewPlanet + = massNewPlanet ,
            c.mode + = "ComputeForce" ,
            force + = sum i for i in (force, c.force) if true
          noelse),
        mode + = "ComputeForceNext"
      else
        mode + = "Ready"
  
  | "ComputeForceNext" ->  
      count + = count + 1 ,
      mode + = "ComputeForceWorking" ]

// This model represents the root of the octree.
// An octree is represented by:
// - a mode (used more like methods)
// - a centerSpace and a widthSpace which characterize 
//   the area of the space where plantes are
// - a massCenter and a positionMassCenter which approximate the set of 
//   planets present in this area
// - a massNewPlanet and a positionNewPlanet which are important elements 
//   to build the octree and to compute the gravitationnal force
// - a force which the result of the computation of the gravitationnal force
model Octree (mode, centerSpace, widthSpace, 
             massNewPlanet, positionNewPlanet, force) =
initially
  ux  =  (1, 0, 0) ,
  uy  =  (0, 1, 0) ,
  uz  =  (0, 0, 1) ,

  nbchildren  =  0 ,
  subspaceindex  =  0 ,
  newCenterSpace  =  (0, 0, 0) ,

  count  =  1
always
  match mode with [
  // default mode
    "Ready" ->
    // To remove all the elements in the octree.
    // Used at each step of the simulation.
  | "Reset" ->  
      centerSpace + = (0, 0, 0) ,
      widthSpace + = 0 ,
      nbchildren + = 0 ,
      count + = 1 ,
      foreach c in self.children do
        terminate c    
   // Set of operations to add a new planet in the octree.
  | "Insert" ->  
      if ux dot positionNewPlanet >=  ux dot centerSpace then
        if uy dot positionNewPlanet >= uy dot centerSpace then
          if uz dot positionNewPlanet >= uz dot centerSpace then
            subspaceindex + = 1 ,
            newCenterSpace + = (ux dot centerSpace + widthSpace * 0.25, 
                                uy dot centerSpace + widthSpace * 0.25, 
                                uz dot centerSpace + widthSpace * 0.25)
          else (
            subspaceindex + = 2 ,
            newCenterSpace + = (ux dot centerSpace + widthSpace * 0.25, 
                                uy dot centerSpace + widthSpace * 0.25, 
                                uz dot centerSpace - widthSpace * 0.25))
        elseif uz dot positionNewPlanet >= uz dot centerSpace then
          subspaceindex + = 3 ,
          newCenterSpace + = (ux dot centerSpace + widthSpace * 0.25, 
                              uy dot centerSpace - widthSpace * 0.25, 
                              uz dot centerSpace + widthSpace * 0.25)
        else (
          subspaceindex + = 4 ,
          newCenterSpace + = (ux dot centerSpace + widthSpace * 0.25, 
                              uy dot centerSpace - widthSpace * 0.25, 
                              uz dot centerSpace - widthSpace * 0.25))         
      elseif uy dot positionNewPlanet >= uy dot centerSpace then
        if uz dot positionNewPlanet >= uz dot centerSpace then
          subspaceindex + = 5 ,
          newCenterSpace + = (ux dot centerSpace - widthSpace * 0.25, 
                              uy dot centerSpace + widthSpace * 0.25, 
                              uz dot centerSpace + widthSpace * 0.25)
        else (
          subspaceindex + = 6 ,
          newCenterSpace + = (ux dot centerSpace - widthSpace * 0.25, 
                              uy dot centerSpace + widthSpace * 0.25, 
                              uz dot centerSpace - widthSpace * 0.25))
      elseif uz dot positionNewPlanet >= uz dot centerSpace then
        subspaceindex + = 7 ,
        newCenterSpace + = (ux dot centerSpace - widthSpace * 0.25, 
                            uy dot centerSpace - widthSpace * 0.25, 
                            uz dot centerSpace + widthSpace * 0.25)
      else (
        subspaceindex + = 8 ,
        newCenterSpace + = (ux dot centerSpace - widthSpace * 0.25, 
                            uy dot centerSpace - widthSpace * 0.25, 
                            uz dot centerSpace - widthSpace * 0.25)),
      nbchildren + = sum 1 for i in self.children if i.modelName == type (OctreeNode) && i.index == subspaceindex ,
      if nbchildren <= 0 then
        create OctreeNode ("Ready", subspaceindex, newCenterSpace, 
               widthSpace * 0.5, massNewPlanet, positionNewPlanet, 0, (0, 0, 0), (0, 0, 0))
      else (
        foreach c in self.children do (
          if c.modelName == type (OctreeNode) && c.index == subspaceindex then
            c.massNewPlanet+ = massNewPlanet ,
            c.positionNewPlanet+ = positionNewPlanet ,
            c.mode+ = "Insert"
          noelse )),
      mode + = "Ready"

    // Set of operations to compute the gravitationnal force
  | "ComputeForce" ->  
      force + = (0, 0, 0) ,
      count + = 1 ,
      mode + = "ComputeForceWorking"
   
  | "ComputeForceWorking" ->  
      if count <= 8 then
        foreach c in self.children do (
          if c.index == count then
            c.positionNewPlanet + = positionNewPlanet ,
            c.massNewPlanet + = massNewPlanet ,
            c.mode + = "ComputeForce" ,
            force + = sum i for i in (force, c.force) if true
          noelse ),
        mode + = "ComputeForceNext"
      else
        mode + = "Ready"
  
  | "ComputeForceNext" ->  
      count + = count + 1 ,
      mode + = "ComputeForceWorking" ]


// This model represents the galaxy with planets
model Galaxy (mode) =
initially
  ux  =  (1, 0, 0) , 
  uy  =  (0, 1, 0) , 
  uz  =  (0, 0, 1) , 

  numPlanet  =  0 ,
  count  =  0 , 

  maxCoordinate  =  0 ,
  minCoordinate  =  0 ,

  max1  =  0 ,
  max2  =  0 ,
  max3  =  0 ,
  min1  =  0 ,
  min2  =  0 ,
  min3  =  0 ,
 
  root  =  create Octree ("Ready", (0, 0, 0), 0,  0, (0, 0, 0), (0, 0, 0))
always
  match mode with [
    "Init" ->  
    // a simple 3 bodies problem
      create Planet (1, 3.0, (-0.9700436, 0.24308753, 0.0), 
                    (0.466203685, 0.43236573, 0), (0, 0, 0), (0, 0, 0)) ,

      create Planet (2, 1.0, (0.9700436, -0.24308753, 0.0), 
                    (0.466203685, 0.43236573, 0), (0, 0, 0), (0, 0, 0)) ,

      create Planet (3, 2.0,  (0.0, 0.0, 0.0), 
                    (-0.93249737, -0.86473146, 0), (0, 0, 0), (0, 0, 0)) ,
      numPlanet + = sum 1 for i in self.children if i.modelName == type (Planet)
    
     // Main steps to simulate the behaviors of planets which are:
     // 1/ remove all the nodes in the octree
     // 2/ compute the center and the width of the space where the planets are
     // 3/ build the octree
     // 4/ compute the gravitationnal force for each planets
  | "Constellate" ->  
      root.mode + = "Reset" ,
      mode + = "ConstellateInit" ,
      mode + = "OctreeBuilding" ,
      mode + = "ComputeForce" 
    
  | "ConstellateInit" ->  
      foreach c in self.children do (
        if c.modelName == type(Planet) then
          // Maximal and minimal coordinate of all the planets
          // in order to characterize the space where the planets are.
          if ux dot c.position >= uy dot c.position then
            max1 + = ux dot c.position ,
            min1 + = uy dot c.position 
          else (
            max1 + = uy dot c.position ,
            min1 + = ux dot c.position),
          if uy dot c.position >= uz dot c.position then
            max2 + = uy dot c.position ,
            min2 + = uz dot c.position
          else (
            max2 + = uz dot c.position ,
            min2 + = uz dot c.position),
          if max1 >= max2 then
            max3 + = max1
          else
            max3 + = max2,
          if min1 <= min2 then
            min3 + = min1
          else
            min3 + = min2,
          if maxCoordinate <= max3 then
            maxCoordinate + = max3
          noelse,
          if minCoordinate >= min3 then
            minCoordinate + = min3
          noelse
        noelse )

   // Construction of the octree based on the current positions of the planets  
  | "OctreeBuilding" ->  
      root.centerSpace + = (0.5 * (minCoordinate + maxCoordinate), 0.5 * (minCoordinate + maxCoordinate), 0.5 * (minCoordinate + maxCoordinate)) ,
      root.widthSpace + = maxCoordinate - minCoordinate ,
      count + = 1 ,
      mode + = "OctreeBuildingWorking"
  
  | "OctreeBuildingWorking" ->  
      if count <= numPlanet then
        foreach c in self.children do (
          if c.modelName == type(Planet) && c.index == count then
            root.positionNewPlanet+ = c.position ,
            root.massNewPlanet+ = c.mass ,        
            root.mode+ = "Insert" ,
            mode+ = "OctreeBuildingNext"
          noelse )
      noelse
  | "OctreeBuildingNext" ->  
      count + = count + 1 ,
      mode + = "OctreeBuildingWorking"

      // Computation of the gravitationnal force based on the octree    
  | "ComputeForce" -> 
      root.force + = (0, 0, 0) ,
      count + = 1 ,
      mode + = "ComputeForceWorking"

  | "ComputeForceWorking" ->  
      if count <= numPlanet then
        foreach c in self.children do (
          if c.modelName == type (Planet) && c.index == count then
            root.positionNewPlanet + = c.position ,
            root.massNewPlanet + = c.mass ,
            root.mode + = "ComputeForce" ,
            c.force + = root.force ,
            mode + = "ComputeForceNext"
          noelse )
      noelse
  
  | "ComputeForceNext" ->  
      count + = count + 1 ,
      mode + = "ComputeForceWorking" ]

// Main model 
model Main (simulation) =
initially
  mode  =  "Init"
always
  match mode with [
    "Init" -> 
      simulation.timeStep + = 0.001 ,
      simulation.endTime + = 10 ,
      create Galaxy ("Init") ,
      mode + = "Persist"
 
  | "Persist" ->  
      foreach c in children do (
        if c.modelName == type (Galaxy) then
          c.mode+ = "Constellate" 
        noelse ) ]
 